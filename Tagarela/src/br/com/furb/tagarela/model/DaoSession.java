package br.com.furb.tagarela.model;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import br.com.furb.tagarela.model.User;
import br.com.furb.tagarela.model.Category;
import br.com.furb.tagarela.model.Symbol;
import br.com.furb.tagarela.model.plan;
import br.com.furb.tagarela.model.symbol_plan;
import br.com.furb.tagarela.model.group_plan;
import br.com.furb.tagarela.model.Group_plan_relationship;

import br.com.furb.tagarela.model.UserDao;
import br.com.furb.tagarela.model.CategoryDao;
import br.com.furb.tagarela.model.SymbolDao;
import br.com.furb.tagarela.model.planDao;
import br.com.furb.tagarela.model.symbol_planDao;
import br.com.furb.tagarela.model.group_planDao;
import br.com.furb.tagarela.model.Group_plan_relationshipDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig userDaoConfig;
    private final DaoConfig categoryDaoConfig;
    private final DaoConfig symbolDaoConfig;
    private final DaoConfig planDaoConfig;
    private final DaoConfig symbol_planDaoConfig;
    private final DaoConfig group_planDaoConfig;
    private final DaoConfig group_plan_relationshipDaoConfig;

    private final UserDao userDao;
    private final CategoryDao categoryDao;
    private final SymbolDao symbolDao;
    private final planDao planDao;
    private final symbol_planDao symbol_planDao;
    private final group_planDao group_planDao;
    private final Group_plan_relationshipDao group_plan_relationshipDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        categoryDaoConfig = daoConfigMap.get(CategoryDao.class).clone();
        categoryDaoConfig.initIdentityScope(type);

        symbolDaoConfig = daoConfigMap.get(SymbolDao.class).clone();
        symbolDaoConfig.initIdentityScope(type);

        planDaoConfig = daoConfigMap.get(planDao.class).clone();
        planDaoConfig.initIdentityScope(type);

        symbol_planDaoConfig = daoConfigMap.get(symbol_planDao.class).clone();
        symbol_planDaoConfig.initIdentityScope(type);

        group_planDaoConfig = daoConfigMap.get(group_planDao.class).clone();
        group_planDaoConfig.initIdentityScope(type);

        group_plan_relationshipDaoConfig = daoConfigMap.get(Group_plan_relationshipDao.class).clone();
        group_plan_relationshipDaoConfig.initIdentityScope(type);

        userDao = new UserDao(userDaoConfig, this);
        categoryDao = new CategoryDao(categoryDaoConfig, this);
        symbolDao = new SymbolDao(symbolDaoConfig, this);
        planDao = new planDao(planDaoConfig, this);
        symbol_planDao = new symbol_planDao(symbol_planDaoConfig, this);
        group_planDao = new group_planDao(group_planDaoConfig, this);
        group_plan_relationshipDao = new Group_plan_relationshipDao(group_plan_relationshipDaoConfig, this);

        registerDao(User.class, userDao);
        registerDao(Category.class, categoryDao);
        registerDao(Symbol.class, symbolDao);
        registerDao(plan.class, planDao);
        registerDao(symbol_plan.class, symbol_planDao);
        registerDao(group_plan.class, group_planDao);
        registerDao(Group_plan_relationship.class, group_plan_relationshipDao);
    }
    
    public void clear() {
        userDaoConfig.getIdentityScope().clear();
        categoryDaoConfig.getIdentityScope().clear();
        symbolDaoConfig.getIdentityScope().clear();
        planDaoConfig.getIdentityScope().clear();
        symbol_planDaoConfig.getIdentityScope().clear();
        group_planDaoConfig.getIdentityScope().clear();
        group_plan_relationshipDaoConfig.getIdentityScope().clear();
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public CategoryDao getCategoryDao() {
        return categoryDao;
    }

    public SymbolDao getSymbolDao() {
        return symbolDao;
    }

    public planDao getPlanDao() {
        return planDao;
    }

    public symbol_planDao getSymbol_planDao() {
        return symbol_planDao;
    }

    public group_planDao getGroup_planDao() {
        return group_planDao;
    }

    public Group_plan_relationshipDao getGroup_plan_relationshipDao() {
        return group_plan_relationshipDao;
    }

}
